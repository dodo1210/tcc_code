/**
 * SettingsPanel.java
 * Version 1.2
 *
 * Last modified on October 29, 2013.
 * Marianopolis College
 */

package gui;

import jproductioncritic.ConfigurationSettings;
import jproductioncritic.JProductionCritic;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.PrintStream;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTable;
import mckay.utilities.gui.tables.StripedTableCellRenderer;

/**
 * <p>The SettingsPanel is used for selecting configuration settings governing which production errors are 
 * checked for and using what thresholds. It allows users to parse settings from configuration settings files,
 * edit these settings and save the settings to configuration settings files.</p>
 * 
 * <p>The top area of this pane allows the user to select the path of the configuration settings file to base 
 * settings on. The configuration settings file at the default path is loaded at startup. The path can not be
 * entered directly in the text field, and must be selected by browsing via the file chooser dialog box.</p>
 * 
 * <p>The middle are of this pane shows the configuration settings that have been parsed from the selected 
 * file. The title of each configuration setting is indicated on the left, and its value on the right. The 
 * values of the configuration settings can be edited by double clicking on them, although their titles may
 * not be edited.</p>
 * 
 * <p>The Revert to Default File button at the bottom of the pane causes the configuration settings file at 
 * the default location to be loaded. If the file there is invalid, it is regenerated with default values. 
 * The Save and Save As buttons allow the user to save the settings in the middle of the screen to the file
 * path referred to at the top of the screen.</p>
 * 
 * <p>It is important to note that processing is done using the saved configuration settings file referred to
 * at the top of this pane. Any changes made by the user to the setting values will only be incorporated into 
 * processing if saved, which happens via the Save and Save As buttons on this pane. Any changes entered to 
 * the table by the user are also automatically saved to the path referred to at the top of this pane if the 
 * Check Single File button or the Check Contents of Directory button is pressed in the Analysis Panel.</p>
 * 
 * <p>Extensive error checking is performed by jProductionCritic on all loaded and edited configuration 
 * settings values. Such error checking is done whenever a configuration settings file is loaded or saved. The
 * user is alerted when this happens. In the case of invalid setting values, a dialog box is presented to the 
 * user instructing the user to correct the invalid settings. In the case of invalid configuration settings 
 * files being loaded, settings are automatically returned to default values. Note that when incomplete 
 * configuration settings files are opened, they are assigned default values for the settings that they are 
 * missing.</p>
 * 
 * <p>Note that if the user wishes to return all settings to defaults but has made changes to the default 
 * configuration settings file, a new file can simply be auto-generated by deleting the configuration 
 * settings file at the default location and rerunning jProductionCritic.</p>
 * 
 * @author	Cory McKay
 */
public class SettingsPanel
	extends JPanel
	implements ActionListener
{
	/* FIELDS ***********************************************************************************************/

	
	/**
	 * The OuterFrame whose tabbed pane holds this JPanel.
	 */
	private	OuterFrame			outer_frame;
	
	/**
	 * The default path for saving configuration files to.
	 */
	private String				default_save_path;
	
	/**
	 * The AnalysisPanel to which error messages can be written.
	 */
	private	AnalysisPanel		analysis_panel;
	
	/**
	 * Holds the path corresponding to the current configuration settings file.
	 */
	private	JTextField			config_file_path_textfield;
	
	/**
	 * Button to bring up a file chooser for selecting the path to load the configuration file from. Sets the
	 * text_report_path_textfield to the selection made, and causes its contents to be parsed into the main
	 * display.
	 */
	private	JButton				config_file_browse_button;
	
	/**
	 * Holds the currently loaded configuration settings.
	 */
	private	JTable				config_settings_table;
	
	/**
	 * Holds the config_settings_table.
	 */
	private JPanel				config_settings_panel;
	
	/**
	 * The dialog box used to choose the load and save paths of the configuration settings file.
	 */
	private JFileChooser		config_file_path_dialog;
		
	/**
	 * Restores default settings.
	 */
	private JButton				default_settings_button;
	
	/**
	 * The button that saves the currently entered configuration settings to the currently selected 
	 * configuration settings file path.
	 */
	private JButton				save_button;
	
	/**
	 * The button that saves the currently entered configuration settings to a location selected via a
	 * JFileChooser.
	 */
	private	JButton				save_as_button;
	
	
	/* CONSTRUCTOR ******************************************************************************************/

	
	/**
	 * Sets up and displays the SettingsPanel GUI component.
	 * 
	 * @param	outer_frame			The OuterFrame whose tabbed pane holds this JPanel.
	 * @param	analysis_panel		The AnanlysisPanel also held in the outer_frame.
	 * @param	default_save_path	The default path from which the configuration settings file will be 
	 *								loaded.
	 */
	public SettingsPanel(OuterFrame outer_frame, AnalysisPanel analysis_panel, String default_save_path)
	{
		// Store the arguments
		this.outer_frame = outer_frame;
		this.analysis_panel = analysis_panel;
		this.default_save_path = (new File(default_save_path)).getAbsolutePath();
		
		// Set border gaps
		int horizontal_gap = 4;
		int vertical_gap = 4;
		
		// Set up config_file_path_dialog
		config_file_path_dialog = new JFileChooser();
		config_file_path_dialog.setCurrentDirectory(new File("."));
		config_file_path_dialog.setFileSelectionMode(JFileChooser.FILES_ONLY);

		// Set up the configuration file path panel
		JPanel config_file_path_panel = new JPanel(new BorderLayout(horizontal_gap, vertical_gap));
		JLabel config_file_path_label = new JLabel("Current Configuration Settings File:");
		config_file_path_textfield = new JTextField();
		config_file_path_textfield.setEditable(false);
		config_file_browse_button = new JButton("Browse");
		config_file_browse_button.addActionListener(SettingsPanel.this);		
		config_file_path_panel.add(config_file_path_label, BorderLayout.WEST);
		config_file_path_panel.add(config_file_path_textfield, BorderLayout.CENTER);
		config_file_path_panel.add(config_file_browse_button, BorderLayout.EAST);

		// Set the configuration file path to the default path
		File config_file = new File(default_save_path);
		config_file_path_textfield.setText(config_file.getAbsolutePath());
		
		// Set up the analysis execution buttons
		JPanel save_button_panel = new JPanel(new GridLayout(1, 3));
		default_settings_button = new JButton("REVERT TO DEFAULT FILE");
		default_settings_button.addActionListener(SettingsPanel.this);
		save_button = new JButton("SAVE");
		save_button.addActionListener(SettingsPanel.this);
		save_as_button = new JButton("SAVE AS");
		save_as_button.addActionListener(SettingsPanel.this);
		save_button_panel.add(default_settings_button);
		save_button_panel.add(save_button);
		save_button_panel.add(save_as_button);

		// Prepare the overall layout
		setLayout(new BorderLayout(horizontal_gap, vertical_gap));
		add(config_file_path_panel, BorderLayout.NORTH);
		add(save_button_panel, BorderLayout.SOUTH);
	}
	
	
	/* PUBLIC METHODS ***************************************************************************************/

	
	/**
	 * Save the contents of the configurations settings table to the path specified in the save_path argument
	 * and update the setting file text field to the value of the save_path argument. Note that all possible
	 * settings are first initialized to default values, and only then are the values in the table added 
	 * (possibly overwriting default values). An error dialog box is displayed if any settings include
	 * invalid values, and processing is canceled. Settings revert to defaults if there is a problem with
	 * writing the file itself.
	 * 
	 * @param save_path	The path to save the configuration settings to.
	 * @return			Returns whether or not processing and saving occurred.
	 */
	public boolean saveEnteredConfigSettings(String save_path)
	{
		// Parse settings from the table and validate them
		ConfigurationSettings parsed_settings = getConfigSettingsFromTable();		
		
		// If the settings are valid
		if (parsed_settings != null)
		{
			try
			{
				// Save to the settings parsed from the table to the specified path
				parsed_settings.saveConfigurationFile(save_path);

				// Update the text field			
				config_file_path_textfield.setText(save_path);

				// Validate everything worked by parsing the newly saved configurations file and update the
				// settings display
				parseAndDisplayConfigurationSettings();
				
				// Return true, indicating that processing was succesful
				return true;
			}
			catch (Exception e)
			{
				goToDefaultSettings();
				reportError(e.getMessage());
				reportError("\nReverted to default configuration settings.\n\n");
			}
		}

		// Return true, indicating that processing was unsuccesful
		return false;
	}
	
	/**
	 * Return the path contained in the Current Configuration Settings File text field.
	 * 
	 * @return	The file path of the configurations file to parse.
	 */
	public String getConfigFilePath()
	{
		return config_file_path_textfield.getText();
	}
		
	/**
	 * Parses the file referred to in the configuration settings file text field and displays the contents on
	 * this panel. Note that all configuration settings are automatically set to defaults before the file is 
	 * parsed. So, if the selected file is not actually a proper configuration settings file then settings are
	 * auto-set to defaults, and if an incomplete file (i.e. with some settings but not all) is specified then
	 * all settings not specified in it are auto-set to defaults. On the other hand, if invalid setting values
	 * are specified in the given file, then default settings are reloaded from the default configuration
	 * settings file path. In this case, if the default configuration settings file path is where the invalid 
	 * setting(s) were loaded from, then a new default file with valid settings is saved there. In any of
	 * these cases, appropriate error messages are written to the Error Text area of the Analysis Panel.
	 */
	public void parseAndDisplayConfigurationSettings()
	{
		try
		{
			// Parse the file pointed to in the config_file_path_textfield (auto-sets to default values first)
			ConfigurationSettings preferences = new ConfigurationSettings( config_file_path_textfield.getText(),
																		   JProductionCritic.getAllErrorCheckers(null),
																		   analysis_panel.getErrorStream() );
			
			// Validate the configuration settings (throws an exception if invalid)
			JProductionCritic.getAllErrorCheckers(preferences);
			
			// Display the parsed settings
			displayConfigurationSettings(preferences);
		}
		catch (Exception e)
		{
			goToDefaultSettings();
			reportError(e.getMessage());
			reportError("\nReverted to default configuration settings.\n\n");
		}
	}
		
	/**
	 * Perform appropriate actions in response to GUI interactions.
	 *
	 * @param	event	The event that is to be reacted to.
	 */
	@Override
	public void actionPerformed(ActionEvent event)
	{
		// React to the config_file_browse_button
		if (event.getSource().equals(config_file_browse_button))
		{
			config_file_path_dialog.setDialogTitle("Choose Configuration Settings File To Load");
			if (config_file_path_dialog.showOpenDialog(SettingsPanel.this) == JFileChooser.APPROVE_OPTION)
			{
				// Update the text field			
				String selected_path = config_file_path_dialog.getSelectedFile().getAbsolutePath();
				config_file_path_textfield.setText(selected_path);
				
				// Parse the configurations file
				parseAndDisplayConfigurationSettings();
			}
		}

		// React to the default_settings_button
		if (event.getSource().equals(default_settings_button))
			goToDefaultSettings();

		// React to the save_button
		if (event.getSource().equals(save_button))
			saveEnteredConfigSettings(config_file_path_textfield.getText());

		// React to the save_as_button
		if (event.getSource().equals(save_as_button))
		{
			config_file_path_dialog.setDialogTitle("Choose Configuration Settings File Save Path");
			if (config_file_path_dialog.showSaveDialog(SettingsPanel.this) == JFileChooser.APPROVE_OPTION)
			{
				String selected_path = config_file_path_dialog.getSelectedFile().getAbsolutePath();
				saveEnteredConfigSettings(selected_path);
			}
		}
	}	
	
	
	/* PRIVATE METHODS **************************************************************************************/

	
	/**
	 * If the currently selected file path is the default save path, then resaves that file with hard coded
	 * default settings. If the currently selected file path is something else, then simply reloads the
	 * contents of the file that is at the default path without saving anything. Either way, the interface
	 * is updated to show the new settings.
	 */
	private void goToDefaultSettings()
	{
		// If the currently selected file path is the default_save_path, then resave that file with 
		// default settings
		if (config_file_path_textfield.getText().equals(default_save_path))
		{
			try
			{
				// Generate default settings
				ConfigurationSettings preferences = new ConfigurationSettings( null,
																			   JProductionCritic.getAllErrorCheckers(null),
																			   analysis_panel.getErrorStream() );

				// Set the default browse path
				config_file_path_textfield.setText(default_save_path);

				// Save the the default settings
				preferences.saveConfigurationFile(config_file_path_textfield.getText());
				
			}					
			catch (Exception e) {reportError(e.getMessage());} // will never happen beause of null arguments above
		}
		
		// If the currently selected file path is something else, then simply reloads the contents of the file
		// that is at the default path without saving anything
		else config_file_path_textfield.setText(default_save_path);
		
		// Either way, load and display configuration settings
		parseAndDisplayConfigurationSettings();
	}	
	
	/**
	 * Read the settings from the configurations settings table and return them as a ConfigurationsSettings
	 * object. Note that all possible settings are first initialized to default values, and only then are the 
	 * values in the table added (possibly overwriting default values). An error dialog box is displayed
	 * if any settings include invalid values, and null is returned in this case.
	 * 
	 * @return	The contents of the table (and any default settings missing from it), or null if invalid
	 *			settings values are specified in the table.
	 */
	private ConfigurationSettings getConfigSettingsFromTable()
	{
		try
		{
			// Parse the contents of the table
			String[][] contents = new String[config_settings_table.getRowCount()][config_settings_table.getColumnCount()];
			for (int i = 0; i < contents.length; i++)
				for (int j = 0; j < contents[i].length; j++)
					contents[i][j] = (String) config_settings_table.getValueAt(i, j);

			// Store the contents of the table
			ConfigurationSettings parsed_contents = new ConfigurationSettings( contents,
																			   JProductionCritic.getAllErrorCheckers(null) );
			
			// Validate the configuration settings (throws an exception if invalid)
			JProductionCritic.getAllErrorCheckers(parsed_contents);
			
			// Return the results
			return parsed_contents;
		}
		catch (Exception e)
		{
			outer_frame.setFocusToSettingsPanel();
			JOptionPane.showMessageDialog( this,
										    e.getMessage() + "\n\nOperation canceled.",
											"Entered Settings Error",
											JOptionPane.ERROR_MESSAGE );
			return null;
		}
	}
	
	/**
	 * Generate and display an editable table showing the contents of the given configuration settings. 
	 * Deletes any pre-existing display. Note that no validation of values is done here.
	 * 
	 * @param preferences	The configuration settings to display.
	 */
	private void displayConfigurationSettings(ConfigurationSettings preferences)
	{
		// Clear the contents of the configuration settings display
		if (config_settings_panel != null)
		{
			remove(config_settings_panel);
			config_settings_table = null;
			config_settings_panel = null;
		}
			
		// Get the configuration settings in a format that can be displayed
		String[][] formatted_preferences = preferences.getStructuredConfigurationSettings();

		// Set up the table model
		Object[] column_headings = { "SETTING NAME", "SETTING VALUE" };
		int number_rows = formatted_preferences.length;
		ConfigurationSettingsTableModel table_model = new ConfigurationSettingsTableModel(column_headings, number_rows);
		table_model.fillTable(formatted_preferences);

		// Set up the JTable
		config_settings_table = new JTable(table_model);

		// Make the table striped
		StripedTableCellRenderer.installInTable( config_settings_table,
			 Color.lightGray,
			 Color.white,
			 null,
			 null );

		// Only allow one row to be selected at a time
		config_settings_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

		// Set up the display panel
		JScrollPane config_settings_scroll_pane = new JScrollPane(config_settings_table);
		config_settings_panel = new JPanel(new GridLayout(1, 1));
		config_settings_panel.add(config_settings_scroll_pane);
		add(config_settings_panel, BorderLayout.CENTER);

		// Display the table
		table_model.fireTableDataChanged();
		repaint();
		outer_frame.repaint();
	}
	
	/**
	 * Print any error messages passed to the Error Text Area of the Analysis Panel (and implicitly change
	 * focus to the Analysis Panel).
	 * 
	 * @param error_message	The error message to display.
	 */
	private void reportError(String error_message)
	{
		// Print the error to the AnalysisPanel
		PrintStream error_stream = analysis_panel.getErrorStream();
		error_stream.append(error_message);
	}
}